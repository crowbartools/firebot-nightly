name: Build Nightly

# run at midnight, every night
on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:

  getInfo:
    name: Get build Info
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.getinfo.outputs.version }}
      patchnotes: ${{ steps.getinfo.outputs.patchnotes }}
      dobuild: ${{ steps.dobuild.outputs.dobuild }}
    steps:
      - name: "Checkout crowbartools/firebot-nightly:master"
        uses: actions/checkout@3

      - name: Checkout crowbartools/firebot:v5
        uses: actions/checkout@v3
        with:
          clean: false
          fetch-depth: 0
          repository: 'crowbartools/firebot'
          ref: 'v5'
          path: '.'

      - name: Get commit messages
        id: commits
        shell: bash
        run: git log --pretty=format:'- %s' --branches=origin/v5 $(git describe --tags `git rev-list --tags --max-count=1`)..HEAD >> commits.txt

      - name: Get Firebot info
        id: getinfo
        run: node ./scripts/get-info.js $GITHUB_OUTPUT

      - name: Check if there are new commits
        id: dobuild
        continue-on-error: true
        run: test -z "$(git rev-list --since="24 hours" $(git show -s --format=%H))" && echo "dobuild=false" >> $GITHUB_OUTPUT

  compile:
    name: 'Compile'
    needs: [getInfo]
    if: needs.getInfo.outputs.dobuild != 'false'
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Nightly Repo
        uses: actions/checkout@3

      - name: Checkout Firebot repo
        uses: actions/checkout@v3
        with:
          clean: false
          repository: 'crowbartools/firebot'
          ref: 'v5'
          path: '.'

      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install correct npm version
        run: npm install -g npm@8.16.0

      - name: Windows Build Prep
        if: runner.os == 'windows'
        shell: bash
        run: |
          npm config set msvs_version 2022
          npm install --global --production --omit=dev windows-build-tools@4.0.0

      - name: Restore Robotjs from cache
        id: robotjs-cache
        uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-robotjs
          path: ./node_modules/robotjs/

      - name: Linux Build Prep
        if: runner.os == 'linux'
        run: sudo apt-get install libx11-dev libxtst-dev libpng-dev

      - name: Install Global Dependencies
        run: npm install --global --production --omit=dev grunt-cli node-gyp

      - name: Install Project Dependencies
        run: npm install

      - name: Rebuild Robotjs for Electron
        if: steps.robotjs-cache.outputs.cache-hit != 'true'
        run: npm run rebuild

      - name: Cache Robotjs build
        if: steps.robotjs-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          key: ${{ runner.os }}-robotjs
          path: ./node_modules/robotjs/

      - name: Decrypt Secrets.gpg
        env:
          PASSKEY_FOR_FIREBOT_SECRETS: ${{ secrets.PASSKEY_FOR_FIREBOT_SECRETS }}
        run: grunt secrets:decrypt

      - name: Set version of nightly
        run: node ./scripts/set-version.js ${{ needs.getInfo.outputs.version }}

      - name: Build for Platform
        run: grunt build

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}
          path: ./dist/install/${{ runner.os == 'macOS' && 'darwin' || runner.os }}/

  draft:
    name: Draft Github Release
    needs: [getInfo, compile]
    if: needs.getInfo.outputs.dobuild != 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Download Compilation Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./bundles/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          token: ${{ env.GITHUB_TOKEN }}
          draft: false
          prerelease: true
          tag_name: v${{ needs.checkversion.outputs.version }}
          name: Nightly v${{ needs.checkversion.outputs.version }}
          body: ${{ needs.gitInfo.outputs.patchnotes }}
          generate_release_notes: false
          files: |
            ./bundles/Windows/firebot-v${{ needs.getInfo.outputs.version }}-setup.exe
            ./bundles/Linux/firebot-v${{ needs.getInfo.outputs.version }}-linux-x64.tar.gz
            ./bundles/macOS/firebot-v${{ needs.getInfo.outputs.version }}-macos-x64.dmg

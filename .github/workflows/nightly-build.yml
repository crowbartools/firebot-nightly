name: Build Nightly

# run at midnight, every night
on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:

  checkLatestCommits:
    name: Check latest commits
    runs-on: ubuntu-latest
    outputs:
      hasNewCommits: ${{ steps.hasNewCommits.outputs.hasNewCommits }}
      sha: ${{ steps.getShortSha.outputs.sha }}
      version: ${{ steps.setversion.outputs.version }}

    steps:
      - name: Checkout crowbartools/firebot:v5
        uses: actions/checkout@v2
        with:
          token: ${{ github.token }}
          repository: 'crowbartools/firebot'
          ref: 'v5'
          path: '.'

      - name: Get last commit SHA
        id: getsha
        run: echo "::set-output name=sha::$(git show -s --format=%H)"

      - name: Check if there are new commits
        id: hasNewCommits
        continue-on-error: true
        run: test -z $(git rev-list --since="24 hours" ${{ steps.getsha.outputs.sha }}) && echo "::set-output name=hasNewCommits::false"

      - name: Read package.json
        id: readpackage
        uses: gregoranders/nodejs-project-info@v0.0.18

      - name: Get last commit SHA (short)
        id: getShortSha
        run: echo "::set-output name=sha::$(git show -s --format=%h)"

      - name: 'Set nightly version'
        id: setversion
        run: echo "::set-output name=version::v${{ steps.readpackage.outputs.version }}-nightly-${{ steps.getShortSha.outputs.sha }}"

  windowsBuild:
    name: Build for windows
    runs-on: windows-2019
    needs: [checkLatestCommits]
    if: needs.checkLatestCommits.outputs.hasNewCommits != 'false'
    outputs:
      success: ${{ steps.finished.outputs.success }}
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ github.token }}
          repository: 'crowbartools/firebot'
          ref: 'v5'
          path: '.'

      - name: Setup Nodejs
        uses: 'actions/setup-node@v1'
        with:
          node-version: '14.x'

      - name: Install Global Dependencies
        shell: bash
        run: |
          npm config set msvs_version 2019
          npm install --quiet --global --production windows-build-tools@4.0.0 grunt-cli node-gyp

      - name: Install Project Dependencies
        run: npm ci --quiet

      - name: Rebuild Robotjs for Electron
        run: npm run rebuild

      - name: Decrypt Secrets.gpg
        env:
          PASSKEY_FOR_FIREBOT_SECRETS: ${{ secrets.PASSKEY_FOR_FIREBOT_SECRETS }}
        run: grunt secrets:decrypt

      - name: Set version
        uses: crowbartools/firebot-version-updater@v1.0.0
        with:
          sha: ${{ needs.checkLatestCommits.outputs.sha }}

      - name: Build
        run: grunt build

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}
          path: './dist/install/${{ runner.os }}/'

      - name: Finishing
        id: finished
        run: echo "::set-output name=success::1"

  ubuntuBuild:
    name: Build for debian
    runs-on: ubuntu-latest
    needs: [checkLatestCommits]
    if: needs.checkLatestCommits.outputs.hasNewCommits != 'false'
    outputs:
      success: ${{ steps.finished.outputs.success }}
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ github.token }}
          repository: 'crowbartools/firebot'
          ref: 'v5'
          path: '.'

      - name: Install Environment Dependencies
        run: sudo apt-get install libx11-dev libxtst-dev libpng-dev

      - name: Setup Nodejs
        uses: 'actions/setup-node@v2'
        with:
          node-version: '14.x'

      - name: Install Global Dependencies
        run: npm install --quiet --global --production grunt-cli node-gyp

      - name: Install Project Dependencies
        run: npm ci --quiet

      - name: Rebuild Robotjs for Electron
        run: npm run rebuild

      - name: Decrypt Secrets.gpg
        env:
          PASSKEY_FOR_FIREBOT_SECRETS: ${{ secrets.PASSKEY_FOR_FIREBOT_SECRETS }}
        run: grunt secrets:decrypt

      - name: Set version
        uses: crowbartools/firebot-version-updater@v1.0.0
        with:
          sha: ${{ needs.checkLatestCommits.outputs.sha }}

      - name: Build
        run: grunt build

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}
          path: './dist/install/${{ runner.os }}/'

      - name: Finishing
        id: finished
        run: echo "::set-output name=success::1"

  publish:
    name: 'Publish Release'
    needs: [checkLatestCommits, windowsBuild, ubuntuBuild]
    runs-on: 'windows-latest'
    steps:
      - name: Download Windows Artifacts
        if: needs.windowsBuild.outputs.success == 1
        uses: 'actions/download-artifact@v2'
        with:
          name: 'Windows'
          path: './bundles/'

      - name: Download Linux Artifacts
        if: needs.ubuntuBuild.outputs.success == 1
        uses: 'actions/download-artifact@v2'
        with:
          name: 'Linux'
          path: './bundles/'

      - name: Draft Release
        id: draft
        uses: 'actions/create-release@v1'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.checkLatestCommits.outputs.version }}
          release_name: Release ${{ needs.checkLatestCommits.outputs.version }}
          body: "Nightly build consisting of all changes made to Firebot v5 in the last 24hrs.\n\nThis is a test build; as such support will be limited."
          draft: false
          prerelease: true

      - name: Upload Windows Setup.exe
        if: needs.windowsBuild.outputs.success == 1
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.draft.outputs.upload_url }}
          asset_path: './bundles/FirebotV5Setup.exe'
          asset_name: 'Firebot-${{ needs.checkLatestCommits.outputs.version }}.exe'
          asset_content_type: application/octet-stream

      - name: Upload Tarball file
        if: needs.ubuntuBuild.outputs.success == 1
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.draft.outputs.upload_url }}
          asset_path: './bundles/Firebot-linux-x64.tar.gz'
          asset_name: 'firebot-${{ needs.checkLatestCommits.outputs.version }}.tar.gz'
          asset_content_type: application/octet-stream